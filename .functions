#!/bin/bash

calc() {
  echo "scale=3; $*" | bc
}

cget() {
  curl -fJOL --compressed "$@"
}

cg2dot() {
  { type -P gprof2dot || type -P dot; } &>/dev/null || return 1
  (( $# == 2 )) || { echo "Usage: $FUNCNAME: <input> <output>"; return 1; }
  gprof2dot --format=callgrind $1 | dot -T${2##*.} -o "$2"
}

confpac() {
  [[ -f autogen.sh ]] || return 1
  ./autogen.sh
  dconfigure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-git-version --enable-debug "$@"
}

pushd() {
  builtin pushd "${@:-$HOME}"
}

dconfigure() {
  if [[ -x /bin/dash ]]; then
    CONFIG_SHELL=/bin/dash /bin/dash ./configure CONFIG_SHELL=/bin/dash "$@"
  else
    ./configure "$@"
  fi
}

debugflags() {
  local -a flags cppflags ldflags

  cflags=(-Wclobbered -Wempty-body -Wfloat-equal -Wignored-qualifiers
          -Wmissing-declarations -Wmissing-parameter-type -Wsign-compare
          -Wmissing-prototypes -Wold-style-declaration -fstack-protector-all
          -Wtype-limits -Woverride-init -Wstrict-prototypes -Wuninitialized)
  cppflags=(-D_FORTIFY_SOURCE=2)
  ldflags=(-lssp)

  # lulz
  for flagarr in {c,cpp,ld}flags; do
    eval "${flagarr^^}=\${${flagarr}[*]}"
  done

  export {LD,C{,PP}}FLAGS
}

deps() {
  local prog
  if [[ -f "$1" ]]; then
    prog=$1
  else
    prog=$(type -P $1)
    echo -e "$1 => $prog\n"
  fi

  [[ -z $prog ]] && { echo "File not found"; return 1; }
  readelf -d $prog | sed -n '/NEEDED/s/.* library: \[\(.*\)\]/\1/p'
}

depscan() {
  [[ -z $1 ]] && { echo "usage: depscan <package>"; return; }
  while read elfobj; do
    readelf -d $elfobj | sed -n 's|.*NEEDED.*\[\(.*\)\].*|'$elfobj' -- \1|p'
  done < <(file $(pacman -Qlq $1) | sed -n '/ELF/s/^\(.*\):.*/\1/p') | nl
}

down() {
  local i=0 match type
  local -a matches

  if (( ! $# )); then
    printf 'usage: down [-f|-d] <file|dir> [matchnum]\n'
    printf '  -f    search for files (default)\n'
    printf '  -d    search for directories\n'
    return 1
  fi

  if [[ $1 == -@(d|f) ]]; then
    type=${1#-}
    shift
  else
    type=f
  fi

  while read -r -d '' match; do
    matches[++i]=$match
  done< <(find . -type $type -name "$1" -print0)

  if (( ! ${#matches[*]} )); then
    return 1
  fi

  if (( i == 1 )); then
    if [[ $type = d ]]; then
      cd "${matches[i]}"
    else
      cd "${matches[i]%/*}"
    fi
  else
    if (( $# == 1 )); then
      i=0
      for match in "${matches[@]}"; do
        (( ++i ))
        printf '%d) %s\n' "$i" "${matches[i]}"
      done
    else
      if (( $2 > i )); then
        return 1
      fi
      if [[ $type = d ]]; then
        cd "${matches[$2]}"
      else
        cd "${matches[$2]%/*}"
      fi
    fi
  fi
}

ex() {
  if [[ -f $1 ]]; then
    case $1 in
      *.tar.@(bz2|gz|xz))  tar xvf $1     ;;
      *.@(tar|tbz2|tgz))   tar xvf $1     ;;
      *.bz2)               bunzip2 $1     ;;
      *.rar)               unrar x $1     ;;
      *.gz)                gunzip $1      ;;
      *.lzma)              unxz $1        ;;
      *.rpm)               bsdtar xf $1   ;;
      *.zip)               unzip $1       ;;
      *.Z)                 uncompress $1  ;;
      *.7z)                7z x $1        ;;
      *.exe)               cabextract $1  ;;
      *)                   echo "'$1': unrecognized file compression" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

ghclone() {
  (( $# == 2 )) || return 1
  git clone "git://github.com/$1/$2"
}

hex2dec() {
  printf "%d\n" 0x$1
}

kopt() {
  [[ $1 ]] || return 1
  declare -u opt=$1
  zgrep "$opt" /proc/config.gz
}

ljoin() {
  [[ $1 ]] || { echo "usage: ljoin IFS args..."; return 1; } >&2
  ( IFS=$1; echo "${*:2}" )
}

lsmod() {
  local width=$(tput cols)

  if (( width > 120 )); then
    # OH GOD IM USING CAT!!
    {
      echo "Module Size Ref UsedBy Stat Address"
      cat /proc/modules
    } | column -t
  else
    command lsmod
  fi
}

mak() {
  if [[ ! -f Makefile ]]; then
    local -a src=(*.c)
    make "${src[@]%.c}" "$@"
  else
    make "$@"
  fi
}

man2pdf() {
  local manpage out

  [[ $1 ]] || { echo "usage: man2pdf <manpage>"; return 1; }>&2

  if manpage=$(man -w "$1"); then
    out=/tmp/$1.pdf
    [[ -e $out ]] || man -t $1 | ps2pdf - > $out
    [[ -e $out ]] && xo $out
  else
    echo "ERROR: manpage \"$1\" not found."
  fi
}

mkcd() {
  [[ $1 ]] || return 0
  [[ -d $1 ]] || mkdir -vp "$1"
  [[ -d $1 ]] && builtin cd "$1"
}

sprunge() (
  [[ -t 0 ]] && exec 0<"$1"
  URI=$(curl -sF 'sprunge=<-' 'http://sprunge.us')
  [[ ! -t 1 ]] && flag='-n'
  echo $flag "$URI"
)

sdstatus() {
  local -a services

  for serv; do
    [[ $serv = *.@(service|socket|path|target|mount) ]] || serv+='.service'
    services+=("$serv")
  done

  systemctl status "${services[@]}"
}

t() {
  tmux -L main "${@:-attach}"
}

unwork() {
  if [[ -z $1 ]]; then
    echo "usage: unwork <dirname>"
    return 1
  fi

  if [[ -d $1 ]]; then
    local count
    read count < <(find "$1" -type d -name '.svn' -printf 'foo\n' -exec rm -rf {} + | wc -l)
    if [[ $? != 0 ]]; then
      echo "Error occurred. Nothing done." >&2
    elif [[ $count = 0 ]]; then
      echo "Nothing done."
    else
      echo "SUCCESS. Directory is no longer a working copy ($count .svns removed)."
    fi
  else
    echo "ERROR: $1 is not a directory"
  fi
}

up() {
  [[ $1 ]] || { cd ..; return; } # default to 1 level

  local x= traverse= curpath=

  for x; do
    if [[ $x == +([[:digit:]]) ]]; then
      (( x == 0 )) && return # noop

      # build a path to avoid munging OLDPWD
      while (( x-- )); do
        traverse+=../
      done

      cd "$traverse"
    else
      curpath=$PWD

      while [[ $curpath && ! -e $curpath/$x ]]; do
        curpath=${curpath%/*}
      done

      if [[ $curpath ]]; then
        cd "$curpath"
      else
        printf "error: failed to locate \`%s' in a parent directory\n" "$x"
        return 1
      fi
    fi
  done
}

urlencode() {
  local i= char= url=$*
  declare -i len=${#url}

  for (( i = 0; i < len; i++ )); do
    char=${url:i:1}
    case "$char" in
      [a-zA-Z0-9.~_-]) printf "$char" ;;
      ' ') printf + ;;
      *) printf '%%%X' "'$char" ;;
    esac
  done
}

xclipc() {
  xclip -selection clipboard "$@"
}

xkbreset() {
  [[ $DISPLAY ]] || return 1
  eval $(grep 'xset r rate' ~/.xinitrc)
  eval $(grep 'terminate' ~/.xinitrc)
}

xs() {
  xclip -o | sprunge
}

# vim: syn=sh ft=sh et
